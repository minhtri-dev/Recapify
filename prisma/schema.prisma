generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  directUrl  = env("DIRECT_DATABASE_URL")
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String     @unique
  image         String?
  emailVerified DateTime?
  accounts      Account[]
  sessions      Session[]
  projects      Project[]
  sources       Source[]
  quizzes       Quiz[]

  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

// Define the models for authentication

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}

// Define the Project and Note models

model Project {
  id        Int      @id @default(autoincrement())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  name      String
  notes     Note[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Note {
  id        Int      @id @default(autoincrement())
  projectId Int
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  content   String
  vector    Unsupported("vector")?
  sources   Source[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Source {
  id      Int     @id @default(autoincrement())
  userId  String
  user    User    @relation(fields: [userId], references: [id])
  content String
  url     String?
  notes   Note[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Quiz and Question models

model Quiz {
  id          Int      @id @default(autoincrement())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  title       String   // e.g., "Neural Networks Practice Quiz"
  prompt      String   // The original user prompt
  questions   Question[] // One-to-many with questions
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("quizzes")
}

model Question {
  id          Int      @id @default(autoincrement())
  quizId      Int
  quiz        Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  content     String   // The actual question text
  type        QuestionType @default(MULTIPLE_CHOICE)
  options     String[] // For multiple choice questions (JSON array)
  correctAnswer String? // The correct answer or answer key
  explanation String?  // Optional explanation of the answer
  difficulty  Difficulty @default(MEDIUM)
  order       Int      // Order within the quiz
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("questions")
}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  SHORT_ANSWER
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}
